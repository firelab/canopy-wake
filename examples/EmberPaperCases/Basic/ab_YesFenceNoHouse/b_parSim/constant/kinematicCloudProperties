/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      kinematicCloudProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solution
{
    active          true;
    coupled         false;
    transient       yes;
    cellValueSourceCorrection off;
    
    integrationSchemes
    {
        U               Euler;
    }
    
    interpolationSchemes
    {
        rho             cell;
        U               cellPoint;
        mu              cell;
    }
}

constantProperties
{
    rho0            150;
}

subModels
{
    particleForces
    {
        sphereDrag;
        gravity;
    }

    injectionModels
    {
        // 
        // spherical particles of diameter 1 mm (or 1.5 mm or 2 mm) and density 150 kg/m^3 are to be injected into a rectangular area (a sheet of particles) as an instantaneous release,
        // uniformly distributed at 25 pars/ft^2, where the rectangular area is placed 1H (or 5H) upwind of the vegetation fence, the rectangular area extending
        // from the ground to 2H above the vegetation fence and to 1H on both sides of the vegetation fence, the vegetation fence being of size H x 16H x H, 
        // the vegetation fence placed 10H downwind in x and right in the middle of the domain in y with 10H of empty space on each side, 
        // where H is 18 ft.
        // 
        // because the simulation is instantaneous, duration is set to the simulation timestep
        // duration = timestep = 0.01 seconds;
        // 
        // the area is ( 1H + 16H + 1H ) x ( 1H + 2H ) = 18H x 3H = 18*18ft x 3*18ft = 324 ft x 54 ft = 17,496 ft^2
        // nPars = pars/area * area = 25 pars/ft^2 * 17,496 ft^2 = 437,400 pars
        // 
        // parcelsPerSecond = nPars/duration = 437,400 pars / 0.01 seconds = 43,740,000 pars/second;
        // 
        // setting the location of the rectangle requires calculating the min and max coordinates
        // notice that xMin and xMax are equal, no other min and max are equal, collapsing the cuboid down to be a rectangle
        // xMin = 10H - 1H = 9H = 9*18ft = 162 ft (49.3776 m)   OR   xMin = 10H - 5H = 5H = 5*18ft = 90 ft (27.4320 m)
        // xMax = xMin (want a rectangle not a cube for the injection)
        // yMin = 10H - 1H = 9H = 9*18ft = 162 ft (49.3776 m)
        // yMax = yMin + 1H (amount on sides) + 16H (fence width) + 1H (amount on sides) = ...
        //      = 9H (yMin) + 1H (amount on sides) + 16H (fence width) + 1H (amount on sides) = 27H = 27*18ft = 486 ft (148.1328 m)
        // zMin = 0H = 0*18ft = 0 ft (0 m)
        // zMax = 1H (fence) + 2H (above fence) = 3H = 3*18ft = 54 ft (16.4592 m)
        // 
        
        model1
        {
            type                myCuboidInjection;
            
            // time information
            SOI                 0;  // time to delay before releasing particles. Is messed up and doesn't work if starting at a time directory greater than 0.
            duration            0.01;   // amount of time over which to do the release. Splits up the number of parcels and mass over the time of release, but this is messed up when starting with a time directory greater than 0. Instantaneous release, seems you need to use the timestep as the value for a one time release. In this case I want an instantaneous release, so this value is set to the timestep value found in controlDict.
            
            // quantity information
            massTotal           0;  // <-- not used with these settings. SAYS IT IS SET TO DO NOTHING IF USING parcelBasisType fixed. Luckily this value isn't really used.
            parcelBasisType     fixed;  // determines the method for calculating nParticles. Fixed means you choose nParticles. The other options calculate it using combinations of total mass, particle mass, particle volume, total volume.
            parcelsPerSecond    43740000;  // To get this number, take your desired total number of particles to be released by this injection and divide it by the duration of the injection to convert from nPars/x_seconds to nPars/1_second. So parcelsPerSecond = nPars/duration.  Notice that the algorythm can randomly add an extra parcel.
            flowRateProfile     constant 1; // is this even used? I'm still not fully understanding how this is used or how it affects things. It seems related to parcelsToInject, like the volume equivalent version of it, but I still don't understand it. It seems to only matter when parcelBasisType is not set to fixed, and seems separate from the volumeTotal of the particles themselves.
            nParticle           1;  // the number of particles per parcel. Seems like a mass per parcel almost, indirectly? But only if the solver is meant to do that type of calculation, this solver doesn't use this method, seems to ignore particles and just works with parcels.
            
            // size information
            sizeDistribution
            {
                type        fixedValue;
                fixedValueDistribution
                {
                    value   0.001; //0.001 m is 1 mm or 1,000 micrometers
                    //value   0.0015; //0.0015 m is 1.5 mm or 1,500 micrometers
                    //value   0.002; //0.002 m is 2 mm or 2,000 micrometers
                }
            }
            
            // velocity method and vars
            velocityType        cellCenterValues;   //constantVelocity;//cellCenterValues;
            //U0                  (9 0 0);    // a single velocity value to be used for all particles if velocityType is set to constantVelocity
            
            // injection geometry information
            // notice that xMin and xMax are equal, no other min and max are equal, collapsing the cuboid down to be a rectangle
            xMin                 49.3776;   //27.4320;//49.3776;
            xMax                 49.3776;   //27.4320;//49.3776;
            yMin                 49.3776;
            yMax                148.1328;
            zMin                  0.0000;
            zMax                 16.4592;
        }
    }

    dispersionModel myStochasticDispersionRAS;//stochasticDispersionRAS//gradientDispersionRAS;//none;
    patchInteractionModel standardWallInteraction;
        standardWallInteractionCoeffs
        {
            type stick;//rebound;//stick;//escape;
        }
    stochasticCollisionModel none;  // options for particleFoam are only none
    surfaceFilmModel none;  // options for particleFoam are only none
    collisionModel none;  // options for particleFoam are only none or pairCollision. Runs way slower.
}


cloudFunctions
{
    //myParCalcs1
    //{
    //    type myParCalcs;
    //}
}


// ************************************************************************* //
