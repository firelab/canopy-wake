/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      kinematicCloudProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solution
{
    active          true;
    coupled         false;
    transient       yes;
    cellValueSourceCorrection off;
    
    integrationSchemes
    {
        U               Euler;
    }
    
    interpolationSchemes
    {
        rho             cell;
        U               cellPoint;
        mu              cell;
    }
}

constantProperties
{
    rho0            150;    //300;
}

subModels
{
    particleForces
    {
        sphereDrag;
        gravity;
    }

    injectionModels
    {
        model1
        {
            type                myPatchInjection;
            patchName           xMin;
            
            // time information
            SOI                 0;  // time to delay before releasing particles. Is messed up and doesn't work if starting at a time directory greater than 0.
            duration            1;   // amount of time over which to do the release. Splits up the number of parcels and mass over the time of release, but this is messed up when starting with a time directory greater than 0. Instantaneous release, seems you need to use the timestep as the value for a one time release.   For this one, I want to release 2,500,000 parcels over 1 second. This would be 2.5 million parcels total. This would be the equivalent of releasing 25 parcels/ft^2 over a 100,000 ft^2 area over 1 second. This is also 0.25 parcels/ft^2 over a 100,000 ft^2 area each 0.01 seconds (25 parcels/ft^2 over a 100,000 ft^2 area each 1 second * 0.01 seconds/0.01 seconds = 0.25 parcels/ft^2 per 0.01 seconds), so unfortunately you might have to go a few timesteps or do a single time release to see how good it is at filling the nPars/area. Looks like each 0.1 seconds you would see 2.5 parcels/ft^2 though.
            
            // quantity information
            massTotal           0;  // <-- not used with these settings. SAYS IT IS SET TO DO NOTHING IF USING parcelBasisType fixed. Luckily this value isn't really used.
            parcelBasisType     fixed;  // determines the method for calculating nParticles. Fixed means you choose nParticles. The other options calculate it using combinations of total mass, particle mass, particle volume, total volume.
            parcelsPerSecond    2500000;  // I want to release 2,500,000 parcels over 1 second. As the timestep is 0.01 seconds, this will result in 2,500,000/second * 0.01 seconds/0.01 seconds = 25,000 parcels per 0.01 seconds.  Notice that the algorythm can randomly add an extra parcel.
            flowRateProfile     constant 1; // is this even used? I'm still not fully understanding how this is used or how it affects things. It seems related to parcelsToInject, like the volume equivalent version of it, but I still don't understand it. It seems to only matter when parcelBasisType is not set to fixed, and seems separate from the volumeTotal of the particles themselves.
            nParticle           1;  // the number of particles per parcel. Seems like a mass per parcel almost, indirectly? But only if the solver is meant to do that type of calculation, this solver doesn't use this method, seems to ignore particles and just works with parcels.
            
            // size information
            sizeDistribution
            {
                type        normal;
                normalDistribution
                {
                    minValue     0.001;  //0.001 m is 1 mm or 1,000 micrometers
                    maxValue     0.030;  //0.03 m is 30 mm
                    expectation  0.01;   //this is the mean, mu
                    variance     0.015;  //this is the standard deviation, sigma. Notice that sigma^2 is technically the variance, I think it is named wrong in the code
                    /*
                    minValue     0.0001; //0.0001 m is 0.1 mm or 100 micrometers
                    maxValue     0.010;  //0.01 m is 10 mm
                    expectation  0.0001; //this is the mean, mu
                    variance     0.0095; //this is the standard deviation, sigma. Notice that sigma^2 is technically the variance, I think it is named wrong in the code
                    */
                }
            }
            
            // velocity method and vars
            velocityType        cellCenterValues;   //constantVelocity;//cellCenterValues;
            //U0                  (9 0 0);    // a single velocity value to be used for all particles*/
            
        }
    }

    dispersionModel myStochasticDispersionRAS;//stochasticDispersionRAS//gradientDispersionRAS;//none;
    patchInteractionModel standardWallInteraction;
        standardWallInteractionCoeffs
        {
            type stick;//rebound;//stick;//escape;
        }
    stochasticCollisionModel none;  // options for particleFoam are only none
    surfaceFilmModel none;  // options for particleFoam are only none
    collisionModel none;  // options for particleFoam are only none or pairCollision. Runs way slower.
}


cloudFunctions
{
    //myParCalcs1
    //{
    //    type myParCalcs;
    //}
}


// ************************************************************************* //
