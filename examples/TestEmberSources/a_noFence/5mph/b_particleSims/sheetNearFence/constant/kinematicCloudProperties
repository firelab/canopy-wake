/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      kinematicCloudProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solution
{
    active          true;
    coupled         false;
    transient       yes;
    cellValueSourceCorrection off;
    
    integrationSchemes
    {
        U               Euler;
    }
    
    interpolationSchemes
    {
        rho             cell;
        U               cellPoint;
        mu              cell;
    }
}

constantProperties
{
    rho0            150;    //300;
}

subModels
{
    particleForces
    {
        sphereDrag;
        gravity;
    }

    injectionModels
    {
        model1
        {
            type                myCuboidInjection;
            
            // time information
            SOI                 0;  // time to delay before releasing particles. Is messed up and doesn't work if starting at a time directory greater than 0.
            duration            0.01;   // amount of time over which to do the release. Splits up the number of parcels and mass over the time of release, but this is messed up when starting with a time directory greater than 0. Instantaneous release, seems you need to use the timestep as the value for a one time release.   For this one, I want to release 25 pars/ft^2 over 1 second, but as a single time release. The area is either 2.75H (2.75*18ft = 49.5ft) x 2H + 288 ft + 2H (360 ft) = 17,820 ft^2 or the same but with 3H so 19,440 ft^2. So this would be 25 pars/ft^2 * area = 445,500 or 486,000 parcels total released at a single timestep.
            
            // quantity information
            massTotal           0;  // <-- not used with these settings. SAYS IT IS SET TO DO NOTHING IF USING parcelBasisType fixed. Luckily this value isn't really used.
            parcelBasisType     fixed;  // determines the method for calculating nParticles. Fixed means you choose nParticles. The other options calculate it using combinations of total mass, particle mass, particle volume, total volume.
            parcelsPerSecond    44550000;  // I want to release 445,500 or 486,000 parcels over 1 second, but as a single time release. As the timestep is 0.01 seconds, this would mean that I need a parcelsPerSecond of nPars/0.01 seconds = 44,550,000 or 48,600,000 nPars/second.  Notice that the algorythm can randomly add an extra parcel.
            flowRateProfile     constant 1; // is this even used? I'm still not fully understanding how this is used or how it affects things. It seems related to parcelsToInject, like the volume equivalent version of it, but I still don't understand it. It seems to only matter when parcelBasisType is not set to fixed, and seems separate from the volumeTotal of the particles themselves.
            nParticle           1;  // the number of particles per parcel. Seems like a mass per parcel almost, indirectly? But only if the solver is meant to do that type of calculation, this solver doesn't use this method, seems to ignore particles and just works with parcels.
            
            // size information
            sizeDistribution
            {
                type        normal;
                normalDistribution
                {
                    minValue     0.001;  //0.001 m is 1 mm or 1,000 micrometers
                    maxValue     0.030;  //0.03 m is 30 mm
                    expectation  0.01;   //this is the mean, mu
                    variance     0.015;  //this is the standard deviation, sigma. Notice that sigma^2 is technically the variance, I think it is named wrong in the code
                    /*
                    minValue     0.0001; //0.0001 m is 0.1 mm or 100 micrometers
                    maxValue     0.010;  //0.01 m is 10 mm
                    expectation  0.0001; //this is the mean, mu
                    variance     0.0095; //this is the standard deviation, sigma. Notice that sigma^2 is technically the variance, I think it is named wrong in the code
                    */
                }
            }
            
            // velocity method and vars
            velocityType        cellCenterValues;   //constantVelocity;//cellCenterValues;
            //U0                  (9 0 0);    // a single velocity value to be used for all particles
            
            // injection geometry information
            // my attempt is to get particles to fall onto the object from the front and from above, with 1.25 H hitting from the front, 
            //  and 1.5H or 1.75H coming in from above through the object and the recirculation zone
            // So the object is 2.75H or 3H in height. I used 2H on each side of the object for the width.
            //  Having the particles come in from 3H upwind of the object, it is guessed that they would fall by 2H or so in that 3H travel distance
            //  so the object is 2.75H or 3H in height, placed at 2H above the ground.
            // notice that xMin and xMax are equal, no other min and max are equal, collapsing the cuboid down to be a rectangle
            xMin                16.4592;     // 3H = 3*18ft = 54 ft = 16.4592 m
            xMax                16.4592;
            yMin                43.8912;     // 10H-2H = 8H = 8*18ft = 144 ft = 43.8912 m
            yMax                153.619;     // 144 ft + 2H (2*18ft = 36 ft) + 288 ft (fence width) + 2H (2*18ft = 36 ft) = 504 ft = 153.619 m
            zMin                10.9728;     // 2H = 2*18ft = 36 ft = 10.9728 m
            zMax                15.0876;     // 2.75H = 2.75*18ft = 49.5 ft = 15.0876 m, OR 3H = 3*18ft = 54 ft = 16.4592 m
        }
    }

    dispersionModel myStochasticDispersionRAS;//stochasticDispersionRAS//gradientDispersionRAS;//none;
    patchInteractionModel standardWallInteraction;
        standardWallInteractionCoeffs
        {
            type stick;//rebound;//stick;//escape;
        }
    stochasticCollisionModel none;  // options for particleFoam are only none
    surfaceFilmModel none;  // options for particleFoam are only none
    collisionModel none;  // options for particleFoam are only none or pairCollision. Runs way slower.
}


cloudFunctions
{
    //myParCalcs1
    //{
    //    type myParCalcs;
    //}
}


// ************************************************************************* //
